@using System.Timers
@using UI.Model
<div class="participant-card" style="left: @X; top: @Y">
    <div style="display:flex;
                flex-direction: column;
                align-items: center;
                margin: 10px">
        <h2>@Participant.Name (@Participant.Id)</h2>
        <img
            src="images/@Participant.AvatarImg"
            alt="Profile"
            class="profile-image"
            @onmousedown="StartDrag"
            @onmouseup="StopDrag"
            @onmouseleave="StopDrag"
            @onmousemove="ExecuteDrag"
            ondragstart="return false;"/>
        <label>@GetTalkTime()</label>
        <div>
            @if (Participant.IsTalking)
            {
                <img src="images/Pause.png" class="icon" alt="" @onclick="Pause"/>
            }
            else
            {
                <img src="images/Play.png" class="icon" alt="" @onclick="Play"/>
            }
        </div>
    </div>
</div>

@code {
    [Parameter] public Participant Participant { get; set; } = null!;
    [Parameter] public EventCallback<string> OnStartTiming { get; set; }

    private string X => Participant.X + "px";
    private string Y => Participant.Y + "px";
    private bool isDragging;
    private double xOffset;

    private long time = 0;

    private Timer timer = null!;
    private int timeInterval = 100;

    protected override void OnInitialized()
    {
        timer = new Timer(timeInterval);
        timer.Elapsed += UpdateUi;
        timer.AutoReset = true;
        Participant.OnStopTalking += Pause;
        Participant.OnFlipTalkingState += FlipTalking;
    }

    private void FlipTalking()
    {
        if (Participant.IsTalking)
        {
            Pause();
        }
        else
        {
            Play(); // ignore await
        }
    }

    private async void UpdateUi(object? sender, ElapsedEventArgs e)
    {
        await InvokeAsync(() =>
        {
            Participant.Time += timeInterval;
            StateHasChanged();
        });
    }

    private void Pause()
    {
        Participant.IsTalking = false;
        timer.Stop();
    }

    private async Task Play()
    {
        Participant.IsTalking = true;
        timer.Start();
        await OnStartTiming.InvokeAsync(Participant.Id);
    }

    private string GetTalkTime()
    {
        string talkingTime = TimeSpan.FromMilliseconds(Participant.Time).ToString("G");
        if (talkingTime.Length > 12)
        {
            talkingTime = talkingTime.Substring(2, 10);
        }

        return talkingTime;
    }

    private void StartDrag(MouseEventArgs e)
    {
        xOffset = e.ClientX;
        isDragging = true;
    }

    private void StopDrag()
    {
        if (!isDragging) return;
        isDragging = false;
    }

    private void ExecuteDrag(MouseEventArgs e)
    {
        if (!isDragging) return;

        // following offsets are strangely necessary to maintain the entity box relative to where the mouse was clicked.
        Participant.Y = (int)(e.ClientY - 130);
        Participant.X = (int)(e.ClientX - 90);
        // Redrawer.RaiseRedrawEvent();
    }

}